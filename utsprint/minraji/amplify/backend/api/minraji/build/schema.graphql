type Message {
  id: ID!
  username: String!
  content: String!
}

type User {
  id: ID!
  username: String!
  roomid: Room
}

type Room {
  id: ID!
  movie: String
  tilte: String
  numberofmember: Int
  privatepassword: String
  users(filter: ModelUserFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserConnection
  time: Int
  reservedtime: Int
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelMessageFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  content: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getMessage(id: ID!): Message
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getRoom(id: ID!): Room
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection
}

input CreateMessageInput {
  id: ID
  username: String!
  content: String!
}

input UpdateMessageInput {
  id: ID!
  username: String
  content: String
}

input DeleteMessageInput {
  id: ID
}

type Mutation {
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room
}

input ModelMessageConditionInput {
  username: ModelStringInput
  content: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

type Subscription {
  onCreateMessage: Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessage: Message @aws_subscribe(mutations: ["updateMessage"])
  onDeleteMessage: Message @aws_subscribe(mutations: ["deleteMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onUpdateRoom: Room @aws_subscribe(mutations: ["updateRoom"])
  onDeleteRoom: Room @aws_subscribe(mutations: ["deleteRoom"])
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  username: String!
  userRoomidId: ID
}

input UpdateUserInput {
  id: ID!
  username: String
  userRoomidId: ID
}

input DeleteUserInput {
  id: ID
}

input ModelUserConditionInput {
  username: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelRoomConnection {
  items: [Room]
  nextToken: String
}

input ModelRoomFilterInput {
  id: ModelIDInput
  movie: ModelStringInput
  tilte: ModelStringInput
  numberofmember: ModelIntInput
  privatepassword: ModelStringInput
  time: ModelIntInput
  reservedtime: ModelIntInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

input CreateRoomInput {
  id: ID
  movie: String
  tilte: String
  numberofmember: Int
  privatepassword: String
  time: Int
  reservedtime: Int
}

input UpdateRoomInput {
  id: ID!
  movie: String
  tilte: String
  numberofmember: Int
  privatepassword: String
  time: Int
  reservedtime: Int
}

input DeleteRoomInput {
  id: ID
}

input ModelRoomConditionInput {
  movie: ModelStringInput
  tilte: ModelStringInput
  numberofmember: ModelIntInput
  privatepassword: ModelStringInput
  time: ModelIntInput
  reservedtime: ModelIntInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
}
