{"remainingRequest":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/thread-loader/dist/cjs.js!/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js!/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mech-user/Documents/minraji/utsprint/minraji/src/components/room.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/src/components/room.vue","mtime":1590497582815},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1590497441462},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/thread-loader/dist/cjs.js","mtime":1590497442294},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js","mtime":1590497441362},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1590497441462},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js","mtime":1590497442326}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["room.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<!-- 待機部屋の画面、部屋が作られると一覧が表示される -->\n<div>\n<header>\n<h1 class=\"headline\">\n  <a>みんラジ!</a>\n</h1>\n <ul class=\"nav-list\">\n      <li class=\"nav-list-item\"><router-link to=\"/\"><button id=\"back-home-button\">ホーム</button></router-link></li>\n      <li class=\"nav-list-item\"><!-- 部屋を作成する画面に移動 --><router-link to=\"/room_create\"><button id=\"create-room-button\">ルームを作成する</button></router-link></li>\n      <li class=\"nav-list-item\"> <amplify-sign-out></amplify-sign-out></li>\n  </ul>\t\n\n</header>\n<main>\n  <section>\n    <section>\n      <h2>ルーム広場</h2>\n      <p>ここはルームに入る待機場所です。「ルームを作成する」ボタンを押したら、ルームを作成するページに移動するので\n      そこでルームを作成してください。\n      </p>\n      <router-link to=\"/room_create\"><button id=\"create-room-button\">ルームを作成する</button></router-link>\n\n    </section>\n   \n      <!-- 部屋情報を一つずつ取ってきて表示する、押すとそれぞれの画面に移動する -->\n    <section>\n      <!-- <calendar></calendar> -->\n      <div class=\"main-contents\">\n      <h2>作成したルーム一覧</h2>\n      <p>作成されたルーム一覧です。自分が作ったルームに入りましょう。</p>\n      <div id='room' v-for=\"room in rooms\" :key=\"room.id\">\n        <button id = \"go-my-room-button\" v-on:click=\"passCheck(room.id)\">{{room.tilte}}</button>\n        参加者 : {{room.numberofmember}} 名\n        開始時刻 : {{room.reservedtime}}\n      </div>\n      <div id='overlay' v-show='showContent'>\n        <input id=\"password-input\" placeholder=\"ルームのパスワードを入力してください\" size=\"20\" type='text' value=\"\"/>\n        <button id = \"password-send-button\" v-on:click=\"passwordInput\">送る</button>\n        <br>\n        <p><button v-on:click='closeModel' id = \"password-close-button\">閉じる</button></p>\n        <br>\n        <p id=\"errormessage\"></p>\n      </div>\n      <div class=\"error\">{{ this.error }}</div>\n      </div>\n    </section>\n\n    <section>\n      <h2>予定の確認</h2>\n      <p>「カレンダーページ」ボタンを押すとカレンダーが表示されて、作成されたルームの確認ができます。</p>\n      <router-link to=\"/calendar\"><button id=\"go-calendar-button\">カレンダーページ</button></router-link>\n    </section>\n      \n  </section>\n</main>\n\n</div>\n</template>\n\n\n<script>\nimport API, {  graphqlOperation } from '@aws-amplify/api';\nimport router from '../router/router'\n// import calendar from \"./calendar\"\nimport { listRooms } from '../graphql/queries';\nimport { getRoom } from '../graphql/queries';\n// import { updateRoom } from \"../graphql/mutations\";\nimport { updateUser } from \"../graphql/mutations\";\n// import UserStore from '../mobx/UserStore'\n// import RoomMember from '../mobx/RoomMember'\nimport { Auth } from 'aws-amplify'\nimport { listUsers } from '../graphql/queries';\nimport { updateRoom } from '../graphql/mutations';\n\nwindow.LOG_LEVEL = 'VERBOSE';\n\nexport default {\n  name: 'chat',\n  // components: {\n    // calendar\n  // },\n  data(){\n    return {\n      userName: \"\",\n      userId: \"\",\n      members: [],\n      error: \"\",\n      rooms: [],\n      showContent: false,\n      password: \"\",\n      passcheck: false,\n      roomId: \"\"\n      // subscription: {},\n    }\n  },\n  methods :{\n    async fetch(){\n      //部屋データを取得\n      RoomMember\n      const roomlimit = 100  // 表示する部屋の数のmax\n      const rooms = await API.graphql(graphqlOperation(listRooms,{limit:roomlimit}))\n      this.rooms = rooms.data.listRooms.items\n    },\n    async gotoroom(){\n      //ユーザー部屋入室情報追加\n      const updateuserinput = {\n        id: this.userId,\n        username: this.userName,\n        userRoomidId: this.roomId\n      }\n      await API.graphql(graphqlOperation(updateUser, { input: updateuserinput }))\n        .catch(error => this.error = JSON.stringify(error))\n      // 部屋の人数更新\n      // const getroom = await API.graphql(graphqlOperation(getRoom,{id: this.roomId}))\n      // const roommember = getroom.data.getRoom.numberofmember\n      // const addroommenber = {\n      //   id: this.roomId,\n      //   numberofmember: roommember + 1\n      // }\n      // console.log(roommember)\n      // await API.graphql(graphqlOperation(updateRoom, { input: addroommenber }))\n      //   .catch(error => this.error = JSON.stringify(error))\n\n      router.push('/room/in')\n    },\n    //パスワード関連\n    passwordInput(){\n      console.log(this.passcheck)\n      let passwordinput = document.getElementById(\"password-input\").value\n      if(passwordinput === this.password){\n        this.showContent = false\n        this.gotoroom()\n      }\n      else{\n        var erromessage = document.getElementById(\"errormessage\")\n        erromessage.innerHTML = \"パスワードが違います\"\n      }\n    },\n\n    async passCheck(id){\n      this.roomId = id\n      const getroom = await API.graphql(graphqlOperation(getRoom,{id: this.roomId}))\n      console.log(getroom.data.getRoom.privatepassword)\n      if(getroom.data.getRoom.privatepassword){\n        console.log('passcheck')\n        this.password = getroom.data.getRoom.privatepassword\n        this.showContent = true\n      }\n      else{\n        this.gotoroom()\n      }\n    },\n    async inituserdata() {\n      try{\n        const user = await Auth.currentAuthenticatedUser()\n        this.userName = user.username\n      } catch (err) {\n        console.log('error getting user data... ', err)\n      }\n      console.log('username:',this.userName)\n      if(this.userName !== ''){\n        const userdata =  await API.graphql(graphqlOperation(listUsers, { filter: {'username':{eq: this.userName}}}))\n        console.log(userdata.data.listUsers.items[0].id)\n        this.userId = userdata.data.listUsers.items[0].id\n      }\n    },\n    async init(){\n    try{\n      const roomlimit = 100  // 表示する部屋の数のmax\n      const getroomlist = await API.graphql(graphqlOperation(listRooms,{limit:roomlimit}))\n      this.rooms = getroomlist.data.listRooms.items\n    } catch (err) {\n      console.log('error getting room data... ', err)\n    }\n    for(var i=0;i < this.rooms.length;i++){\n      console.log(this.rooms[i])\n      var roomid = this.rooms[i].id\n      this.upDateRoom(roomid)\n    }\n  },\n  async upDateRoom(id){\n    const getroom = await API.graphql(graphqlOperation(getRoom,{id: id}))\n    const membernum = getroom.data.getRoom.users.items.length\n    const updateroommenber = {\n      id: id,\n      numberofmember: membernum\n    }\n    console.log(updateroommenber)\n    await API.graphql(graphqlOperation(updateRoom, { input: updateroommenber }))\n      .catch(error => this.error = JSON.stringify(error))\n  },\n    closeModel: function(){\n      this.showContent = false\n    },\n  },\n  async created(){\n    await this.inituserdata()\n    await this.init()\n    console.log(this.userName,this.userId)\n    this.fetch()\n  }\n}\n</script>\n\n<style src=\"./chat.css\" />\n"],"sourceRoot":"src/components"}]}