{"remainingRequest":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/thread-loader/dist/cjs.js!/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js!/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/eslint-loader/index.js??ref--13-0!/home/mech-user/Documents/minraji/utsprint/minraji/src/mobx/RoomMember.js","dependencies":[{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/src/mobx/RoomMember.js","mtime":1590497442434},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1590497441462},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/thread-loader/dist/cjs.js","mtime":1590497442294},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js","mtime":1590497441362},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/eslint-loader/index.js","mtime":1590497441778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvbWVjaC11c2VyL0RvY3VtZW50cy9taW5yYWppL3V0c3ByaW50L21pbnJhamkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9ob21lL21lY2gtdXNlci9Eb2N1bWVudHMvbWlucmFqaS91dHNwcmludC9taW5yYWppL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL2hvbWUvbWVjaC11c2VyL0RvY3VtZW50cy9taW5yYWppL3V0c3ByaW50L21pbnJhamkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IEFQSSwgeyBncmFwaHFsT3BlcmF0aW9uIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2FwaSc7CmltcG9ydCB7IHVwZGF0ZVJvb20gfSBmcm9tICcuLi9ncmFwaHFsL211dGF0aW9ucyc7CmltcG9ydCB7IGxpc3RSb29tcyB9IGZyb20gJy4uL2dyYXBocWwvcXVlcmllcyc7CmltcG9ydCB7IGdldFJvb20gfSBmcm9tICcuLi9ncmFwaHFsL3F1ZXJpZXMnOwoKdmFyIFJvb21NZW1iZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJvb21NZW1iZXIoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm9vbU1lbWJlcik7CgogICAgdGhpcy5pbml0KCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUm9vbU1lbWJlciwgW3sKICAgIGtleTogImluaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9pbml0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciByb29tbGltaXQsIGdldHJvb21saXN0LCBpLCByb29taWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CiAgICAgICAgICAgICAgICByb29tbGltaXQgPSAxMDA7IC8vIOihqOekuuOBmeOCi+mDqOWxi+OBruaVsOOBrm1heAoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24obGlzdFJvb21zLCB7CiAgICAgICAgICAgICAgICAgIGxpbWl0OiByb29tbGltaXQKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgZ2V0cm9vbWxpc3QgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgdGhpcy5yb29tcyA9IGdldHJvb21saXN0LmRhdGEubGlzdFJvb21zLml0ZW1zOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvciBnZXR0aW5nIHJvb20gZGF0YS4uLiAnLCBfY29udGV4dC50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yb29tcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnJvb21zW2ldKTsKICAgICAgICAgICAgICAgICAgcm9vbWlkID0gdGhpcy5yb29tc1tpXS5pZDsKICAgICAgICAgICAgICAgICAgdGhpcy51cERhdGVSb29tKHJvb21pZCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzAsIDhdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgcmV0dXJuIF9pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbml0OwogICAgfSgpCiAgfSwgewogICAga2V5OiAidXBEYXRlUm9vbSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3VwRGF0ZVJvb20gPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGlkKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgdmFyIGdldHJvb20sIG1lbWJlcm51bSwgdXBkYXRlcm9vbW1lbmJlcjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24oZ2V0Um9vbSwgewogICAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgZ2V0cm9vbSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgbWVtYmVybnVtID0gZ2V0cm9vbS5kYXRhLmdldFJvb20udXNlcnMuaXRlbXMubGVuZ3RoOwogICAgICAgICAgICAgICAgdXBkYXRlcm9vbW1lbmJlciA9IHsKICAgICAgICAgICAgICAgICAgaWQ6IGlkLAogICAgICAgICAgICAgICAgICBudW1iZXJvZm1lbWJlcjogbWVtYmVybnVtCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgY29uc29sZS5sb2codXBkYXRlcm9vbW1lbmJlcik7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbih1cGRhdGVSb29tLCB7CiAgICAgICAgICAgICAgICAgIGlucHV0OiB1cGRhdGVyb29tbWVuYmVyCiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5lcnJvciA9IEpTT04uc3RyaW5naWZ5KGVycm9yKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiB1cERhdGVSb29tKF94KSB7CiAgICAgICAgcmV0dXJuIF91cERhdGVSb29tLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB1cERhdGVSb29tOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gUm9vbU1lbWJlcjsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgbmV3IFJvb21NZW1iZXIoKTs="},{"version":3,"sources":["/home/mech-user/Documents/minraji/utsprint/minraji/src/mobx/RoomMember.js"],"names":["API","graphqlOperation","updateRoom","listRooms","getRoom","RoomMember","init","roomlimit","graphql","limit","getroomlist","rooms","data","items","console","log","i","length","roomid","id","upDateRoom","getroom","membernum","users","updateroommenber","numberofmember","input","catch","error","JSON","stringify"],"mappings":";;;;AAAA,OAAOA,GAAP,IAAeC,gBAAf,QAAuC,kBAAvC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,oBAAxB;;IAGMC,U;AACJ,wBAAa;AAAA;;AACX,SAAKC,IAAL;AACD;;;;;;;;;;;;AAISC,gBAAAA,S,GAAY,G,EAAK;;;uBACGP,GAAG,CAACQ,OAAJ,CAAYP,gBAAgB,CAACE,SAAD,EAAW;AAACM,kBAAAA,KAAK,EAACF;AAAP,iBAAX,CAA5B,C;;;AAApBG,gBAAAA,W;AACN,qBAAKC,KAAL,GAAaD,WAAW,CAACE,IAAZ,CAAiBT,SAAjB,CAA2BU,KAAxC;;;;;;;AAEAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;;AAEF,qBAAQC,CAAR,GAAU,CAAV,EAAYA,CAAC,GAAG,KAAKL,KAAL,CAAWM,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AACpCF,kBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,CAAX,CAAZ;AACIE,kBAAAA,MAFgC,GAEvB,KAAKP,KAAL,CAAWK,CAAX,EAAcG,EAFS;AAGpC,uBAAKC,UAAL,CAAgBF,MAAhB;AACD;;;;;;;;;;;;;;;;;;;kGAEcC,E;;;;;;;;;uBACOnB,GAAG,CAACQ,OAAJ,CAAYP,gBAAgB,CAACG,OAAD,EAAS;AAACe,kBAAAA,EAAE,EAAEA;AAAL,iBAAT,CAA5B,C;;;AAAhBE,gBAAAA,O;AACAC,gBAAAA,S,GAAYD,OAAO,CAACT,IAAR,CAAaR,OAAb,CAAqBmB,KAArB,CAA2BV,KAA3B,CAAiCI,M;AAC7CO,gBAAAA,gB,GAAmB;AACvBL,kBAAAA,EAAE,EAAEA,EADmB;AAEvBM,kBAAAA,cAAc,EAAEH;AAFO,iB;AAIzBR,gBAAAA,OAAO,CAACC,GAAR,CAAYS,gBAAZ;;uBACMxB,GAAG,CAACQ,OAAJ,CAAYP,gBAAgB,CAACC,UAAD,EAAa;AAAEwB,kBAAAA,KAAK,EAAEF;AAAT,iBAAb,CAA5B,EACHG,KADG,CACG,UAAAC,KAAK;AAAA,yBAAI,KAAI,CAACA,KAAL,GAAaC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAjB;AAAA,iBADR,C;;;;;;;;;;;;;;;;;;;;;AAKV,eAAe,IAAIvB,UAAJ,EAAf","sourcesContent":["import API, {  graphqlOperation } from '@aws-amplify/api';\nimport { updateRoom } from '../graphql/mutations';\nimport { listRooms } from '../graphql/queries';\nimport { getRoom } from '../graphql/queries';\n\n\nclass RoomMember{\n  constructor(){\n    this.init()\n  }\n\n  async init(){\n    try{\n      const roomlimit = 100  // 表示する部屋の数のmax\n      const getroomlist = await API.graphql(graphqlOperation(listRooms,{limit:roomlimit}))\n      this.rooms = getroomlist.data.listRooms.items\n    } catch (err) {\n      console.log('error getting room data... ', err)\n    }\n    for(var i=0;i < this.rooms.length;i++){\n      console.log(this.rooms[i])\n      var roomid = this.rooms[i].id\n      this.upDateRoom(roomid)\n    }\n  }\n  async upDateRoom(id){\n    const getroom = await API.graphql(graphqlOperation(getRoom,{id: id}))\n    const membernum = getroom.data.getRoom.users.items.length\n    const updateroommenber = {\n      id: id,\n      numberofmember: membernum\n    }\n    console.log(updateroommenber)\n    await API.graphql(graphqlOperation(updateRoom, { input: updateroommenber }))\n      .catch(error => this.error = JSON.stringify(error))\n  }\n}\n\nexport default new RoomMember()"]}]}