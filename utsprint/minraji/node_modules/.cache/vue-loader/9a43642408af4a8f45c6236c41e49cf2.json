{"remainingRequest":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mech-user/Documents/minraji/utsprint/minraji/src/components/chatgroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/src/components/chatgroup.vue","mtime":1590497442430},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1590497441462},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/thread-loader/dist/cjs.js","mtime":1590497442294},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js","mtime":1590497441362},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1590497441462},{"path":"/home/mech-user/Documents/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js","mtime":1590497442326}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBBUEksIHsgIGdyYXBocWxPcGVyYXRpb24gfSBmcm9tICdAYXdzLWFtcGxpZnkvYXBpJzsKaW1wb3J0IHsgY3JlYXRlTWVzc2FnZSB9IGZyb20gIi4uL2dyYXBocWwvbXV0YXRpb25zIjsKaW1wb3J0IHsgZ2V0Um9vbSB9IGZyb20gJy4uL2dyYXBocWwvcXVlcmllcyc7CmltcG9ydCB7IGdldFVzZXIgfSBmcm9tICcuLi9ncmFwaHFsL3F1ZXJpZXMnOwppbXBvcnQgVXNlclN0b3JlIGZyb20gJy4uL21vYngvVXNlclN0b3JlJzsKLy8gaW1wb3J0IHsgb25DcmVhdGVNZXNzYWdlIH0gZnJvbSAnLi4vZ3JhcGhxbC9zdWJzY3JpcHRpb25zJzsKCndpbmRvdy5MT0dfTEVWRUwgPSAnVkVSQk9TRSc7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhKCl7CiAgICByZXR1cm57CiAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgcm9vbUlkOiAiIiwKICAgICAgdXNlck5hbWU6ICIiLAogICAgICB1c2VySWQ6ICIiLAogICAgICBlcnJvcjogIiIsCiAgICAgIHN1YnNjcmlwdGlvbjoge30sCiAgICB9CiAgfSwKICBtZXRob2RzIDp7CiAgICBhc3luYyBmZXRjaCgpewogICAgICBjb25zdCBnZXRyb29tID0gYXdhaXQgQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbihnZXRSb29tLHtpZDogdGhpcy5yb29tSWR9KSkKICAgICAgdGhpcy5tZXNzYWdlcyA9IGdldHJvb20uZGF0YS5nZXRSb29tLm1lc3NhZ2VzLml0ZW1zCiAgICAgIGNvbnNvbGUubG9nKHRoaXMubWVzc2FnZXMpCiAgICB9LAogICAgYXN5bmMgc2VuZE1lc3NhZ2UoKXsKICAgICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlaW5wdXQiKS52YWx1ZQogICAgICBjb25zdCBjcmVhdGVtZXNzYWdlID0gewogICAgICAgIGlkOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIHRoaXMudXNlck5hbWUsCiAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlck5hbWUsCiAgICAgICAgY29udGVudDogbWVzc2FnZSwKICAgICAgICBtZXNzYWdlUm9vbWlkSWQ6IHRoaXMucm9vbUlkCiAgICAgIH0KICAgICAgY29uc29sZS5sb2coY3JlYXRlbWVzc2FnZSkKICAgICAgYXdhaXQgQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbihjcmVhdGVNZXNzYWdlLCB7IGlucHV0OiBjcmVhdGVtZXNzYWdlIH0pKQogICAgICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLmVycm9yID0gSlNPTi5zdHJpbmdpZnkoZXJyb3IpKQogICAgfSwKICAgIC8vIHN1YnNjcmliZSgpewogICAgLy8gICB0aGlzLnN1YnNjcmlwdGlvbiA9IEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24ob25DcmVhdGVNZXNzYWdlKSkuc3Vic2NyaWJlKHsKICAgIC8vICAgICBuZXh0OiAoZXZlbnREYXRhKSA9PiB7CiAgICAvLyAgICAgICBjb25zdCBtZXNzYWdlID0gZXZlbnREYXRhLnZhbHVlLmRhdGEub25DcmVhdGVNZXNzYWdlOwogICAgLy8gICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpOwogICAgLy8gICAgIH0KICAgIC8vICAgfSkKICAgIC8vIH0sCiAgfSwKICBhc3luYyBjcmVhdGVkKCl7CiAgICBjb25zdCB7IHVzZXJuYW1lLHVzZXJpZCB9ID0gYXdhaXQgVXNlclN0b3JlCiAgICB0aGlzLnVzZXJOYW1lID0gdXNlcm5hbWUKICAgIHRoaXMudXNlcklkID0gdXNlcmlkIAogICAgY29uc3QgdXNlcl9pZCA9IGF3YWl0IEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24oZ2V0VXNlcix7aWQ6IHRoaXMudXNlcklkfSkpCiAgICBjb25zb2xlLmxvZyh1c2VyX2lkLmRhdGEuZ2V0VXNlci5yb29taWQuaWQpCiAgICB0aGlzLnJvb21JZCA9IHVzZXJfaWQuZGF0YS5nZXRVc2VyLnJvb21pZC5pZAogICAgdGhpcy5mZXRjaCgpCiAgICAvLyB0aGlzLnN1YnNjcmliZSgpCiAgfSwKCn0K"},{"version":3,"sources":["chatgroup.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"chatgroup.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<div>\n<header>\n<h1 class=\"headline\">\n      <a>みんラジ!</a>\n</h1>\n</header>\n\n<main>\n  <div class=\"main-contents\">\n    <div class=\"message_base\">\n        <div v-for=\"message in messages\" :key=\"message.id\">\n          <div v-bind:class=\"[message.username === userName ? 'message' : 'message_opponent']\">{{message.content}}</div>\n          <div v-bind:class=\"[message.username === userName ? 'username' : 'username_opponent']\">{{message.username}}</div>\n        </div>\n    </div>\n    <!-- <el-input placeholder=\"メッセージを入力(Enterで送信)\" v-model=\"content\" @keydown.enter.native=\"sendMessage\"></el-input> -->\n    <input id=\"messageinput\" placeholder=\"メッセージを入力してください\" size=\"30\" type='text' value=\"\"/>\n    <button id = \"sendMessage\" v-on:click=\"sendMessage\">send</button>\n    <router-link to='/room/in' id=\"chatgroup\">test</router-link>\n    <div class=\"error\">{{ this.error }}</div>\n  </div>\n\n\n  </main>\n\n  \n</div>  \n</template>\n\n<script>\nimport API, {  graphqlOperation } from '@aws-amplify/api';\nimport { createMessage } from \"../graphql/mutations\";\nimport { getRoom } from '../graphql/queries';\nimport { getUser } from '../graphql/queries';\nimport UserStore from '../mobx/UserStore';\n// import { onCreateMessage } from '../graphql/subscriptions';\n\nwindow.LOG_LEVEL = 'VERBOSE';\nexport default {\n  data(){\n    return{\n      messages: [],\n      roomId: \"\",\n      userName: \"\",\n      userId: \"\",\n      error: \"\",\n      subscription: {},\n    }\n  },\n  methods :{\n    async fetch(){\n      const getroom = await API.graphql(graphqlOperation(getRoom,{id: this.roomId}))\n      this.messages = getroom.data.getRoom.messages.items\n      console.log(this.messages)\n    },\n    async sendMessage(){\n      const message = document.getElementById(\"messageinput\").value\n      const createmessage = {\n        id: new Date().getTime() + this.userName,\n        username: this.userName,\n        content: message,\n        messageRoomidId: this.roomId\n      }\n      console.log(createmessage)\n      await API.graphql(graphqlOperation(createMessage, { input: createmessage }))\n        .catch(error => this.error = JSON.stringify(error))\n    },\n    // subscribe(){\n    //   this.subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n    //     next: (eventData) => {\n    //       const message = eventData.value.data.onCreateMessage;\n    //       this.messages.push(message);\n    //     }\n    //   })\n    // },\n  },\n  async created(){\n    const { username,userid } = await UserStore\n    this.userName = username\n    this.userId = userid \n    const user_id = await API.graphql(graphqlOperation(getUser,{id: this.userId}))\n    console.log(user_id.data.getUser.roomid.id)\n    this.roomId = user_id.data.getUser.roomid.id\n    this.fetch()\n    // this.subscribe()\n  },\n\n}\n</script>\n\n<style src=\"./chat.css\" />\n\n"]}]}