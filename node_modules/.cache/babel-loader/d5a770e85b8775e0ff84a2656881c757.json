{"remainingRequest":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js!/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vagrant/workspace/minraji/utsprint/minraji/src/components/chatgroup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/src/components/chatgroup.vue","mtime":1590294776000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1588818758000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js","mtime":1588818754000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1588818758000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js","mtime":1588818841000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvdmFncmFudC93b3Jrc3BhY2UvbWlucmFqaS91dHNwcmludC9taW5yYWppL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IEFQSSwgeyBncmFwaHFsT3BlcmF0aW9uIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2FwaSc7CmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2UgfSBmcm9tICIuLi9ncmFwaHFsL211dGF0aW9ucyI7CmltcG9ydCB7IGdldFJvb20gfSBmcm9tICcuLi9ncmFwaHFsL3F1ZXJpZXMnOwppbXBvcnQgeyBnZXRVc2VyIH0gZnJvbSAnLi4vZ3JhcGhxbC9xdWVyaWVzJzsKaW1wb3J0IFVzZXJTdG9yZSBmcm9tICcuLi9tb2J4L1VzZXJTdG9yZSc7IC8vIGltcG9ydCB7IG9uQ3JlYXRlTWVzc2FnZSB9IGZyb20gJy4uL2dyYXBocWwvc3Vic2NyaXB0aW9ucyc7Cgp3aW5kb3cuTE9HX0xFVkVMID0gJ1ZFUkJPU0UnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgcm9vbUlkOiAiIiwKICAgICAgdXNlck5hbWU6ICIiLAogICAgICB1c2VySWQ6ICIiLAogICAgICBlcnJvcjogIiIsCiAgICAgIHN1YnNjcmlwdGlvbjoge30KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBnZXRyb29tOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24oZ2V0Um9vbSwgewogICAgICAgICAgICAgICAgICBpZDogX3RoaXMucm9vbUlkCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGdldHJvb20gPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMubWVzc2FnZXMgPSBnZXRyb29tLmRhdGEuZ2V0Um9vbS5tZXNzYWdlcy5pdGVtczsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzLm1lc3NhZ2VzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNZXNzYWdlOiBmdW5jdGlvbiBzZW5kTWVzc2FnZSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgbWVzc2FnZSwgY3JlYXRlbWVzc2FnZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWVzc2FnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtZXNzYWdlaW5wdXQiKS52YWx1ZTsKICAgICAgICAgICAgICAgIGNyZWF0ZW1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgIGlkOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIF90aGlzMi51c2VyTmFtZSwKICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IF90aGlzMi51c2VyTmFtZSwKICAgICAgICAgICAgICAgICAgY29udGVudDogbWVzc2FnZSwKICAgICAgICAgICAgICAgICAgbWVzc2FnZVJvb21pZElkOiBfdGhpczIucm9vbUlkCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3JlYXRlbWVzc2FnZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbihjcmVhdGVNZXNzYWdlLCB7CiAgICAgICAgICAgICAgICAgIGlucHV0OiBjcmVhdGVtZXNzYWdlCiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZXJyb3IgPSBKU09OLnN0cmluZ2lmeShlcnJvcik7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9IC8vIHN1YnNjcmliZSgpewogICAgLy8gICB0aGlzLnN1YnNjcmlwdGlvbiA9IEFQSS5ncmFwaHFsKGdyYXBocWxPcGVyYXRpb24ob25DcmVhdGVNZXNzYWdlKSkuc3Vic2NyaWJlKHsKICAgIC8vICAgICBuZXh0OiAoZXZlbnREYXRhKSA9PiB7CiAgICAvLyAgICAgICBjb25zdCBtZXNzYWdlID0gZXZlbnREYXRhLnZhbHVlLmRhdGEub25DcmVhdGVNZXNzYWdlOwogICAgLy8gICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpOwogICAgLy8gICAgIH0KICAgIC8vICAgfSkKICAgIC8vIH0sCgogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgX3lpZWxkJFVzZXJTdG9yZSwgdXNlcm5hbWUsIHVzZXJpZCwgdXNlcl9pZDsKCiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBVc2VyU3RvcmU7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX3lpZWxkJFVzZXJTdG9yZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgIHVzZXJuYW1lID0gX3lpZWxkJFVzZXJTdG9yZS51c2VybmFtZTsKICAgICAgICAgICAgICB1c2VyaWQgPSBfeWllbGQkVXNlclN0b3JlLnVzZXJpZDsKICAgICAgICAgICAgICBfdGhpczMudXNlck5hbWUgPSB1c2VybmFtZTsKICAgICAgICAgICAgICBfdGhpczMudXNlcklkID0gdXNlcmlkOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gQVBJLmdyYXBocWwoZ3JhcGhxbE9wZXJhdGlvbihnZXRVc2VyLCB7CiAgICAgICAgICAgICAgICBpZDogX3RoaXMzLnVzZXJJZAogICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICB1c2VyX2lkID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgY29uc29sZS5sb2codXNlcl9pZC5kYXRhLmdldFVzZXIucm9vbWlkLmlkKTsKICAgICAgICAgICAgICBfdGhpczMucm9vbUlkID0gdXNlcl9pZC5kYXRhLmdldFVzZXIucm9vbWlkLmlkOwoKICAgICAgICAgICAgICBfdGhpczMuZmV0Y2goKTsgLy8gdGhpcy5zdWJzY3JpYmUoKQoKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMyk7CiAgICB9KSkoKTsKICB9Cn07"},{"version":3,"sources":["chatgroup.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<div>\n<header>\n<h1 class=\"headline\">\n      <a>みんラジ!</a>\n</h1>\n</header>\n\n<main>\n  <div class=\"main-contents\">\n    <div class=\"message_base\">\n        <div v-for=\"message in messages\" :key=\"message.id\">\n          <div v-bind:class=\"[message.username === userName ? 'message' : 'message_opponent']\">{{message.content}}</div>\n          <div v-bind:class=\"[message.username === userName ? 'username' : 'username_opponent']\">{{message.username}}</div>\n        </div>\n    </div>\n    <!-- <el-input placeholder=\"メッセージを入力(Enterで送信)\" v-model=\"content\" @keydown.enter.native=\"sendMessage\"></el-input> -->\n    <input id=\"messageinput\" placeholder=\"メッセージを入力してください\" size=\"30\" type='text' value=\"\"/>\n    <button id = \"sendMessage\" v-on:click=\"sendMessage\">send</button>\n    <router-link to='/room/in' id=\"chatgroup\">test</router-link>\n    <div class=\"error\">{{ this.error }}</div>\n  </div>\n\n\n  </main>\n\n  \n</div>  \n</template>\n\n<script>\nimport API, {  graphqlOperation } from '@aws-amplify/api';\nimport { createMessage } from \"../graphql/mutations\";\nimport { getRoom } from '../graphql/queries';\nimport { getUser } from '../graphql/queries';\nimport UserStore from '../mobx/UserStore';\n// import { onCreateMessage } from '../graphql/subscriptions';\n\nwindow.LOG_LEVEL = 'VERBOSE';\nexport default {\n  data(){\n    return{\n      messages: [],\n      roomId: \"\",\n      userName: \"\",\n      userId: \"\",\n      error: \"\",\n      subscription: {},\n    }\n  },\n  methods :{\n    async fetch(){\n      const getroom = await API.graphql(graphqlOperation(getRoom,{id: this.roomId}))\n      this.messages = getroom.data.getRoom.messages.items\n      console.log(this.messages)\n    },\n    async sendMessage(){\n      const message = document.getElementById(\"messageinput\").value\n      const createmessage = {\n        id: new Date().getTime() + this.userName,\n        username: this.userName,\n        content: message,\n        messageRoomidId: this.roomId\n      }\n      console.log(createmessage)\n      await API.graphql(graphqlOperation(createMessage, { input: createmessage }))\n        .catch(error => this.error = JSON.stringify(error))\n    },\n    // subscribe(){\n    //   this.subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n    //     next: (eventData) => {\n    //       const message = eventData.value.data.onCreateMessage;\n    //       this.messages.push(message);\n    //     }\n    //   })\n    // },\n  },\n  async created(){\n    const { username,userid } = await UserStore\n    this.userName = username\n    this.userId = userid \n    const user_id = await API.graphql(graphqlOperation(getUser,{id: this.userId}))\n    console.log(user_id.data.getUser.roomid.id)\n    this.roomId = user_id.data.getUser.roomid.id\n    this.fetch()\n    // this.subscribe()\n  },\n\n}\n</script>\n\n<style src=\"./chat.css\" />\n\n"],"sourceRoot":"src/components"}]}