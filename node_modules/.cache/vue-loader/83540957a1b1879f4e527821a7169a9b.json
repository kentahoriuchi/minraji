{"remainingRequest":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vagrant/workspace/minraji/utsprint/minraji/src/components/foryoutube.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/src/components/foryoutube.vue","mtime":1589708072000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1588818758000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/babel-loader/lib/index.js","mtime":1588818754000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/cache-loader/dist/cjs.js","mtime":1588818758000},{"path":"/home/vagrant/workspace/minraji/utsprint/minraji/node_modules/vue-loader/lib/index.js","mtime":1588818841000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KCgpjb25zdCBwbGF5ZXIgPSByZXF1aXJlKCd5b3V0dWJlLXBsYXllcicpCgpjb25zdCBVTlNUQVJURUQgPSAtMQpjb25zdCBFTkRFRCA9IDAKY29uc3QgUExBWUlORyA9IDEKY29uc3QgUEFVU0VEID0gMgpjb25zdCBCVUZGRVJJTkcgPSAzCmNvbnN0IENVRUQgPSA1CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ2ZvcnlvdXR1YmUnLAogIHByb3BzOiB7CiAgICB2aWRlb0lkOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogIjhDUjMyS2RGRC1jIgogICAgfSwKICAgIHBsYXllclZhcnM6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICBkZWZhdWx0OiAoKSA9PiAoe30pCiAgICB9LAogICAgaGVpZ2h0OiB7CiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDM2MAogICAgfSwKICAgIHdpZHRoOiB7CiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDY0MAogICAgfSwKICAgIHJlc2l6ZTogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIHJlc2l6ZURlbGF5OiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMTAwCiAgICB9LAogICAgbm9jb29raWU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICBmaXRQYXJlbnQ6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgcGxheWVyOiB7fSwKICAgICAgZXZlbnRzOiB7CiAgICAgICAgW1VOU1RBUlRFRF06ICd1bnN0YXJ0ZWQnLAogICAgICAgIFtQTEFZSU5HXTogJ3BsYXlpbmcnLAogICAgICAgIFtQQVVTRURdOiAncGF1c2VkJywKICAgICAgICBbRU5ERURdOiAnZW5kZWQnLAogICAgICAgIFtCVUZGRVJJTkddOiAnYnVmZmVyaW5nJywKICAgICAgICBbQ1VFRF06ICdjdWVkJwogICAgICB9LAogICAgICByZXNpemVUaW1lb3V0OiBudWxsCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgYXNwZWN0UmF0aW8gKCkgewogICAgICByZXR1cm4gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBwbGF5ZXJSZWFkeSAoZSkgewogICAgICB0aGlzLiRlbWl0KCdyZWFkeScsIGUudGFyZ2V0KQogICAgfSwKICAgIHBsYXllclN0YXRlQ2hhbmdlIChlKSB7CiAgICAgIGlmIChlLmRhdGEgIT09IG51bGwgJiYgZS5kYXRhICE9PSBVTlNUQVJURUQpIHsKICAgICAgICB0aGlzLiRlbWl0KHRoaXMuZXZlbnRzW2UuZGF0YV0sIGUudGFyZ2V0KQogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKCJzdGF0ZSBjaGFuZ2VkISAiICsgdGhpcy5ldmVudHNbZS5kYXRhXSkKICAgIH0sCiAgICBwbGF5ZXJFcnJvciAoZSkgewogICAgICB0aGlzLiRlbWl0KCdlcnJvcicsIGUudGFyZ2V0KQogICAgfSwKICAgIGFzeW5jIHVwZGF0ZVBsYXllciAodmlkZW9JZCkgewogICAgICBpZiAoIXZpZGVvSWQpIHsKICAgICAgICB0aGlzLnBsYXllci5zdG9wVmlkZW8oKQogICAgICAgIHJldHVybgogICAgICB9CgogICAgICBpZiAodGhpcy5wbGF5ZXJWYXJzLmF1dG9wbGF5ID09PSAxKSB7CiAgICAgICAgYXdhaXQgdGhpcy5wbGF5ZXIubG9hZFZpZGVvQnlJZCggdmlkZW9JZCwgNSApCiAgICAgICAgLy8udGhlbih0aGlzLnBsYXllci5zZWVrKDEwKSkKICAgICAgICByZXR1cm4KICAgICAgfQoKICAgICAgdGhpcy5wbGF5ZXIuY3VlVmlkZW9CeUlkKHsgJ3ZpZGVvSWQnOiB2aWRlb0lkfSkKICAgIH0sCiAgICByZXNpemVQcm9wb3J0aW9uYWxseSAoKSB7CiAgICAgIHRoaXMucGxheWVyLmdldElmcmFtZSgpLnRoZW4oaWZyYW1lID0+IHsKICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuZml0UGFyZW50CiAgICAgICAgICA/IGlmcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoCiAgICAgICAgICA6IGlmcmFtZS5vZmZzZXRXaWR0aAogICAgICAgIGNvbnN0IGhlaWdodCA9IHdpZHRoIC8gdGhpcy5hc3BlY3RSYXRpbwogICAgICAgIHRoaXMucGxheWVyLnNldFNpemUod2lkdGgsIGhlaWdodCkKICAgICAgfSkKICAgIH0sCiAgICBvblJlc2l6ZSAoKSB7CiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVvdXQpCiAgICAgIHRoaXMucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoCiAgICAgICAgdGhpcy5yZXNpemVQcm9wb3J0aW9uYWxseSwKICAgICAgICB0aGlzLnJlc2l6ZURlbGF5CiAgICAgICkKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICB2aWRlb0lkOiAndXBkYXRlUGxheWVyJywKICAgIHJlc2l6ZSAodmFsKSB7CiAgICAgIGlmICh2YWwpIHsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSkKICAgICAgICB0aGlzLnJlc2l6ZVByb3BvcnRpb25hbGx5KCkKICAgICAgfSBlbHNlIHsKICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSkKICAgICAgICB0aGlzLnBsYXllci5zZXRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KQogICAgICB9CiAgICB9LAogICAgd2lkdGggKHZhbCkgewogICAgICB0aGlzLnBsYXllci5zZXRTaXplKHZhbCwgdGhpcy5oZWlnaHQpCiAgICB9LAogICAgaGVpZ2h0ICh2YWwpIHsKICAgICAgdGhpcy5wbGF5ZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB2YWwpCiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95ICgpIHsKICAgIGlmICh0aGlzLnBsYXllciAhPT0gbnVsbCAmJiB0aGlzLnBsYXllci5kZXN0cm95KSB7CiAgICAgIHRoaXMucGxheWVyLmRlc3Ryb3koKQogICAgICBkZWxldGUgdGhpcy5wbGF5ZXIKICAgIH0KCiAgICBpZiAodGhpcy5yZXNpemUpIHsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUpCiAgICB9CiAgfSwKICBtb3VudGVkICgpIHsKICAgIHdpbmRvdy5ZVENvbmZpZyA9IHsKICAgICAgaG9zdDogJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknCiAgICB9CiAgICAKICAgIGNvbnN0IGhvc3QgPSB0aGlzLm5vY29va2llID8gJ2h0dHBzOi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tJyA6ICdodHRwczovL3d3dy55b3V0dWJlLmNvbScKCiAgICB0aGlzLnBsYXllciA9IHBsYXllcih0aGlzLiRlbCwgewogICAgICBob3N0LAogICAgICB3aWR0aDogdGhpcy53aWR0aCwKICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCwKICAgICAgdmlkZW9JZDogdGhpcy52aWRlb0lkLAogICAgICBwbGF5ZXJWYXJzOiB0aGlzLnBsYXllclZhcnMKICAgIH0pCgogICAgdGhpcy5wbGF5ZXIub24oJ3JlYWR5JywgdGhpcy5wbGF5ZXJSZWFkeSkKICAgIHRoaXMucGxheWVyLm9uKCdzdGF0ZUNoYW5nZScsIHRoaXMucGxheWVyU3RhdGVDaGFuZ2UpCiAgICB0aGlzLnBsYXllci5vbignZXJyb3InLCB0aGlzLnBsYXllckVycm9yKQoKICAgIGlmICh0aGlzLnJlc2l6ZSkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZSkKICAgIH0KCiAgICBpZiAodGhpcy5maXRQYXJlbnQpIHsKICAgICAgdGhpcy5yZXNpemVQcm9wb3J0aW9uYWxseSgpCiAgICB9CiAgfSwKICByZW5kZXIgKGgpIHsKICAgIHJldHVybiBoKCdkaXYnKQogIH0KfQoKLy8gLy8gMi4gVGhpcyBjb2RlIGxvYWRzIHRoZSBJRnJhbWUgUGxheWVyIEFQSSBjb2RlIGFzeW5jaHJvbm91c2x5LgovLyB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CgovLyB0YWcuc3JjID0gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGkiOwovLyB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07Ci8vIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpOwoKLy8gLy8gMy4gVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGFuIDxpZnJhbWU+IChhbmQgWW91VHViZSBwbGF5ZXIpCi8vIC8vICAgIGFmdGVyIHRoZSBBUEkgY29kZSBkb3dubG9hZHMuCi8vIHZhciBwbGF5ZXI7Ci8vIGZ1bmN0aW9uIG9uWW91VHViZUlmcmFtZUFQSVJlYWR5KCkgewovLyAgIHBsYXllciA9IG5ldyBZVC5QbGF5ZXIoJ3BsYXllcicsIHsKLy8gICAgIGhlaWdodDogJzM2MCcsCi8vICAgICB3aWR0aDogJzY0MCcsCi8vICAgICB2aWRlb0lkOiAnTTdsYzFVVmYtVkUnLAovLyAgICAgZXZlbnRzOiB7Ci8vICAgICAgICdvblJlYWR5Jzogb25QbGF5ZXJSZWFkeSwKLy8gICAgICAgJ29uU3RhdGVDaGFuZ2UnOiBvblBsYXllclN0YXRlQ2hhbmdlCi8vICAgICB9Ci8vICAgfSk7Ci8vIH0KCi8vIC8vIDQuIFRoZSBBUEkgd2lsbCBjYWxsIHRoaXMgZnVuY3Rpb24gd2hlbiB0aGUgdmlkZW8gcGxheWVyIGlzIHJlYWR5LgovLyBmdW5jdGlvbiBvblBsYXllclJlYWR5KGV2ZW50KSB7Ci8vICAgZXZlbnQudGFyZ2V0LnBsYXlWaWRlbygpOwovLyB9CgovLyAvLyA1LiBUaGUgQVBJIGNhbGxzIHRoaXMgZnVuY3Rpb24gd2hlbiB0aGUgcGxheWVyJ3Mgc3RhdGUgY2hhbmdlcy4KLy8gLy8gICAgVGhlIGZ1bmN0aW9uIGluZGljYXRlcyB0aGF0IHdoZW4gcGxheWluZyBhIHZpZGVvIChzdGF0ZT0xKSwKLy8gLy8gICAgdGhlIHBsYXllciBzaG91bGQgcGxheSBmb3Igc2l4IHNlY29uZHMgYW5kIHRoZW4gc3RvcC4KLy8gdmFyIGRvbmUgPSBmYWxzZTsKLy8gZnVuY3Rpb24gb25QbGF5ZXJTdGF0ZUNoYW5nZShldmVudCkgewovLyAgIGlmIChldmVudC5kYXRhID09IFlULlBsYXllclN0YXRlLlBMQVlJTkcgJiYgIWRvbmUpIHsKLy8gICAgIHNldFRpbWVvdXQoc3RvcFZpZGVvLCA2MDAwKTsKLy8gICAgIGRvbmUgPSB0cnVlOwovLyAgIH0KLy8gfQovLyBmdW5jdGlvbiBzdG9wVmlkZW8oKSB7Ci8vICAgcGxheWVyLnN0b3BWaWRlbygpOwovLyB9Cg=="},{"version":3,"sources":["foryoutube.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"foryoutube.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n  </div>\n</template>\n\n<script>\n\n  const player = require('youtube-player')\n\n  const UNSTARTED = -1\n  const ENDED = 0\n  const PLAYING = 1\n  const PAUSED = 2\n  const BUFFERING = 3\n  const CUED = 5\n\n  export default {\n    name: 'foryoutube',\n    props: {\n      videoId: {\n        type: String,\n        default: \"8CR32KdFD-c\"\n      },\n      playerVars: {\n        type: Object,\n        default: () => ({})\n      },\n      height: {\n        type: [Number, String],\n        default: 360\n      },\n      width: {\n        type: [Number, String],\n        default: 640\n      },\n      resize: {\n        type: Boolean,\n        default: false\n      },\n      resizeDelay: {\n        type: Number,\n        default: 100\n      },\n      nocookie: {\n        type: Boolean,\n        default: false\n      },\n      fitParent: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data () {\n      return {\n        player: {},\n        events: {\n          [UNSTARTED]: 'unstarted',\n          [PLAYING]: 'playing',\n          [PAUSED]: 'paused',\n          [ENDED]: 'ended',\n          [BUFFERING]: 'buffering',\n          [CUED]: 'cued'\n        },\n        resizeTimeout: null\n      }\n    },\n    computed: {\n      aspectRatio () {\n        return this.width / this.height\n      }\n    },\n    methods: {\n      playerReady (e) {\n        this.$emit('ready', e.target)\n      },\n      playerStateChange (e) {\n        if (e.data !== null && e.data !== UNSTARTED) {\n          this.$emit(this.events[e.data], e.target)\n        }\n        console.log(\"state changed! \" + this.events[e.data])\n      },\n      playerError (e) {\n        this.$emit('error', e.target)\n      },\n      async updatePlayer (videoId) {\n        if (!videoId) {\n          this.player.stopVideo()\n          return\n        }\n\n        if (this.playerVars.autoplay === 1) {\n          await this.player.loadVideoById( videoId, 5 )\n          //.then(this.player.seek(10))\n          return\n        }\n\n        this.player.cueVideoById({ 'videoId': videoId})\n      },\n      resizeProportionally () {\n        this.player.getIframe().then(iframe => {\n          const width = this.fitParent\n            ? iframe.parentElement.offsetWidth\n            : iframe.offsetWidth\n          const height = width / this.aspectRatio\n          this.player.setSize(width, height)\n        })\n      },\n      onResize () {\n        clearTimeout(this.resizeTimeout)\n        this.resizeTimeout = setTimeout(\n          this.resizeProportionally,\n          this.resizeDelay\n        )\n      }\n    },\n    watch: {\n      videoId: 'updatePlayer',\n      resize (val) {\n        if (val) {\n          window.addEventListener('resize', this.onResize)\n          this.resizeProportionally()\n        } else {\n          window.removeEventListener('resize', this.onResize)\n          this.player.setSize(this.width, this.height)\n        }\n      },\n      width (val) {\n        this.player.setSize(val, this.height)\n      },\n      height (val) {\n        this.player.setSize(this.width, val)\n      }\n    },\n    beforeDestroy () {\n      if (this.player !== null && this.player.destroy) {\n        this.player.destroy()\n        delete this.player\n      }\n\n      if (this.resize) {\n        window.removeEventListener('resize', this.onResize)\n      }\n    },\n    mounted () {\n      window.YTConfig = {\n        host: 'https://www.youtube.com/iframe_api'\n      }\n      \n      const host = this.nocookie ? 'https://www.youtube-nocookie.com' : 'https://www.youtube.com'\n\n      this.player = player(this.$el, {\n        host,\n        width: this.width,\n        height: this.height,\n        videoId: this.videoId,\n        playerVars: this.playerVars\n      })\n\n      this.player.on('ready', this.playerReady)\n      this.player.on('stateChange', this.playerStateChange)\n      this.player.on('error', this.playerError)\n\n      if (this.resize) {\n        window.addEventListener('resize', this.onResize)\n      }\n\n      if (this.fitParent) {\n        this.resizeProportionally()\n      }\n    },\n    render (h) {\n      return h('div')\n    }\n  }\n\n  // // 2. This code loads the IFrame Player API code asynchronously.\n  // var tag = document.createElement('script');\n\n  // tag.src = \"https://www.youtube.com/iframe_api\";\n  // var firstScriptTag = document.getElementsByTagName('script')[0];\n  // firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n  // // 3. This function creates an <iframe> (and YouTube player)\n  // //    after the API code downloads.\n  // var player;\n  // function onYouTubeIframeAPIReady() {\n  //   player = new YT.Player('player', {\n  //     height: '360',\n  //     width: '640',\n  //     videoId: 'M7lc1UVf-VE',\n  //     events: {\n  //       'onReady': onPlayerReady,\n  //       'onStateChange': onPlayerStateChange\n  //     }\n  //   });\n  // }\n\n  // // 4. The API will call this function when the video player is ready.\n  // function onPlayerReady(event) {\n  //   event.target.playVideo();\n  // }\n\n  // // 5. The API calls this function when the player's state changes.\n  // //    The function indicates that when playing a video (state=1),\n  // //    the player should play for six seconds and then stop.\n  // var done = false;\n  // function onPlayerStateChange(event) {\n  //   if (event.data == YT.PlayerState.PLAYING && !done) {\n  //     setTimeout(stopVideo, 6000);\n  //     done = true;\n  //   }\n  // }\n  // function stopVideo() {\n  //   player.stopVideo();\n  // }\n</script>"]}]}